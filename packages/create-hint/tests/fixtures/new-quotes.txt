/**
 * @fileoverview This is a \`description\` that contains 'single quote' and "double qutoes"
 */

import { Category } from '../../enums/category';
import { HintContext } from '../../hint-context';
// The list of types depends on the events you want to capture.
import { IHint, FetchStart, FetchEnd, FetchError, HintMetadata } from '../../types';
import { debug as d } from '../../utils/debug';
import { HintScope } from '../../enums/hintscope';

const debug: debug.IDebugger = d(__filename);

/*
 * ------------------------------------------------------------------------------
 * Public
 * ------------------------------------------------------------------------------
 */

export default class NewHint implements IHint {

    public static readonly meta: HintMetadata = {
        docs: {
            category: Category.pwa,
            description: `This is a \`description\` that contains 'single quote' and "double qutoes"`
        },
        recommended: true,
        id: "new-hint",
        schema: [
            /*
             * If you want to allow the user to configure your hint
             * you should use a valid JSON schema. More info in:
             * https://webhint.io/docs/contributor-guide/how-to/hints/#the-meta-property
             */
        ],
        scope: HintScope.site
    }

    public constructor(context: HintContext): IHint {

        // Your code here.
        const validateFetchStart = async (fetchStart: FetchStart) => {
            // Code to validate the hint on the event fetch::start.

            const { resource } = fetchStart;

            debug(`Validating hint new`);

            /*
             * This is where all the magic happens. Any errors found should be
             * reported using the `context` object. E.g.:
             * await context.report(resource, null, 'Add error message here.');
             *
             * More information on how to develop a hint is available in:
             * https://webhint.io/docs/contributor-guide/hints/
             */

            if (Math.ceil(Math.random()) === 0) {
                await context.report(resource, null, 'Add error message here.');
            }
        };
        const validateFetchEnd = async (fetchEnd: FetchEnd) => {
            // Code to validate the hint on the event fetch::end.

            const { resource } = fetchEnd;

            debug(`Validating hint new`);

            /*
             * This is where all the magic happens. Any errors found should be
             * reported using the `context` object. E.g.:
             * await context.report(resource, null, 'Add error message here.');
             *
             * More information on how to develop a hint is available in:
             * https://webhint.io/docs/contributor-guide/hints/
             */

            if (Math.ceil(Math.random()) === 0) {
                await context.report(resource, null, 'Add error message here.');
            }
        };
        const validateFetchError = async (fetchError: FetchError) => {
            // Code to validate the hint on the event fetch::error.

            const { resource } = fetchError;

            debug(`Validating hint new`);

            /*
             * This is where all the magic happens. Any errors found should be
             * reported using the `context` object. E.g.:
             * await context.report(resource, null, 'Add error message here.');
             *
             * More information on how to develop a hint is available in:
             * https://webhint.io/docs/contributor-guide/hints/
             */

            if (Math.ceil(Math.random()) === 0) {
                await context.report(resource, null, 'Add error message here.');
            }
        };

        context.on('fetch::end', validateFetchEnd);
        context.on('fetch::error', validateFetchError);
        context.on('fetch::start', validateFetchStart);
        // As many events as you need
    }
}
