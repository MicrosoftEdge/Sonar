import * as proxyquire from 'proxyquire';
import * as sinon from 'sinon';
import test from 'ava';
import { EventEmitter2 } from 'eventemitter2';

proxyquire('../src/{{normalizedName}}', {
    // Dependecies you need to stub/spy/mock.
});

import * as {{capitalizedName}} from '../src/{{normalizedName}}';

test.beforeEach((t) => {
    t.context.engine = new EventEmitter2({
        delimiter: '::',
        maxListeners: 0,
        wildcard: true
    });
});

test.afterEach.always((t) => {
    // Things you need to clean after each tests.
});

{{#each events}}
test.serial('Test for event {{event}}', async (t) => {
    const parser = new {{../capitalizedName}}.default(t.context.engine); // eslint-disable-line new-cap
    // Code to prepare your test.

    await t.context.engine.emitAsync('{{event}}', { /* testing data */ });

    // Code to check if everything is ok.
});
{{#unless @last}}

{{/unless}}
{{/each}}
