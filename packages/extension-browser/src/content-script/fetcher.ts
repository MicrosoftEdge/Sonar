import { FetchEnd, NetworkData } from 'hint/dist/src/lib/types';
import { fetch } from '../shared/globals';
import { Events } from '../shared/types';

type ResolveNetworkData = (data: NetworkData) => void;

export class Fetcher {
    private _fetches = new Map<string, ResolveNetworkData>();

    /**
     * Fetch a resource bypassing CORS restrictions on the response.
     */
    public fetch(target: string, headers?: any): Promise<NetworkData> {
        return new Promise((resolve, reject) => {
            this._fetches.set(target, resolve);

            /*
             * Trigger a fetch, but don't resolve the response as it may be
             * missing headers due to CORS restrictions. For details see
             * https://www.chromium.org/Home/chromium-security/extension-content-script-fetches
             *
             * Instead, wait for the corresponding `FetchEnd` event to be
             * generated by the devtools `onRequestFinished` listener and
             * passed to `resolveFetch` below. Then return that instead as
             * it will have all response headers.
             */
            fetch(target, { headers }).catch(reject);
        });
    }

    /**
     * Handle events received from the background script that were
     * indirectly triggered via a manual fetch.
     */
    public handle(events: Events): boolean {
        if (events.fetchEnd && this.isFetching(events.fetchEnd.resource)) {
            this.resolveFetch(events.fetchEnd);

            return true;
        }

        if (events.fetchStart && this.isFetching(events.fetchStart.resource)) {
            return true;
        }

        return false;
    }

    /**
     * Check if a received network request was triggered by a manual fetch.
     */
    private isFetching(resource: string) {
        return this._fetches.has(resource);
    }

    /**
     * Complete a manual fetch using the provided `FetchEnd` data generated
     * from the `browser.devtools.onRequestFinished` event.
     */
    private resolveFetch(event: FetchEnd) {
        const resolve = this._fetches.get(event.resource);

        if (resolve) {
            resolve(event);
            this._fetches.delete(event.resource);
        }
    }
}
